Introduction to (imperative) programming - Part 3
Master 1

Sebastien Binet
CNRS/IN2P3/LPC-Clermont
sebastien.binet@clermont.in2p3.fr

* Arrays and Slices

* Arrays and Slices

So far we've seen how to declare and use variables of builtin types (`int`, `float64`, ...)

But in real life, we usually have to deal with variables of more than just one value: a collection of values (of the same type.)

_E.g.:_ a collection of energy deposits in a calorimeter, a collection of hits positions in a tracker, the list of names of a students' class, etc...

In [[https://golang.org][Go]], collections of items come in two flavours:

- static arrays: arrays whose number of elements are known and *fixed* at compile time
- dynamic arrays: arrays whose number of elements are not known beforehand and can be resized at run time.

* Arrays

Arrays in Go are static arrays.
Their size is fixed and can not be neither extended nor shrunk.

 var a [10]int
 var b [1]float64
 var c = [3]int{1, 2, 3}
 d := [3]int{10, 20, 30}
 e := [...]int{10, 20, 30}

One can access the first element of an array `arr` with:

 arr := [10]int{0, 2, 4, 6, 8, 10, 12, 14, 16, 18}
 e1 := arr[0] // first element. value==0

One can also use the builtin function `len` to retrieve the size of an array:

 size := len(arr) // here, size==10

So to access the last element of an array:

 e10 := arr[len(arr)-1] // value==18

* 

Write a new program, in `~/go/src/arr/main.go`, that creates an array of 3 unsized integers, from 10 to 12.
Print each element of the array and then modify the element at index 1 to the new value 42.
Re-print each element of the array.

The program shall print:

 arr[0]= 10
 arr[1]= 11
 arr[2]= 12
 arr[0]= 10
 arr[1]= 42
 arr[2]= 12

## * Solution
## 
## .play _code/arr.go

* Slices

Slices in Go are dynamic arrays.
Their size is not necessarily known at compile time and can change during the execution of the program.

 var a []float64             // a slice with 0 element
 var b = []int{1, 2, 3}      // a slice with 3 elements
 c := []int{10, 20, 30}      // a slice with 3 elements
 var d = make([]float64, 10) // a slice with 10 elements (all zeros)
 e := make([]float64, 10)    // a slice with 10 elements (all zeros)

`make` is a builtin function of [[https://golang.org][Go]] that allocates the needed memory to hold the requested number of elements of the given type:

 slice := make([]T, nelemts)

* 

Element access and modification are performed the same as for arrays:

 a := []int{0, 2, 4, 6, 8, 10, 12, 14, 16, 18}
 e1 := a[0] // first element. value == 0
 size := len(a) // ==10
 a[1] = 42

To add a new element at the end of a slice:

 a = append(a, 20)
 size = len(a) // ==11
 a = append(a, 22, 24)
 size = len(a) // ==13

* 

One can also sub-slice a slice (take a sub-sample of the original slice):

 a := []int{1, 2, 3, 4, 5}
 b := a[1:3]           // == {2, 3}
 c := a[0:2]           // == {1, 2}
 d := a[:3]            // == {1, 2, 3}
 e := a[1:]            // == {2, 3, 4, 5}
 f := a[:]             // == {1, 2, 3, 4, 5}

*NOTE:* a slice and its sub-slice *share* the same underlying backing array:

 a := []int{1, 2, 3, 4}
 b := a[1:3]  // == {2, 3}
 b[0] = 3
 println(b[0], b[1])       // 3 3
 println(a[0], a[1], a[2]) // 1 3 3

* 

Write a new program, in `~/go/src/sli/main.go`, that creates an empty slice of `float64` and then appends 3 new values: `1.2`, `3.4` and `5.6`.
Print the 3 values, increase `sli[2]` by `1` and reprint the values.

The program shall display:

  sli[0]= +1.200000e+000
  sli[1]= +3.400000e+000
  sli[2]= +5.600000e+000
  sli[0]= +1.200000e+000
  sli[1]= +3.400000e+000
  sli[2]= +6.600000e+000

What does happen if you try to access `sli[3]` ?

## * Solution
## 
## .play _code/sli.go


* Maps

* Maps

Maps in Go are associative containers.
They associate a key, with a value.
Their size is not necessarily known at compile time and can change during the execution of the program.

 var a map[string]int             // a map with keys of type string and values int
 var b = map[string]int{"1": 1}   // a map with 1 element
 var c = make(map[string]int)     // a map with an initial capacity of 0
 var d = make(map[string]int, 10) // a map with an initial capacity of 10

`make` is a builtin function of [[https://golang.org][Go]] that allocates the needed memory to hold the requested number of elements of the given type:

 m := make(map[K]V, nelemts)

* 

Element access and modification are performed like so:

 m := map[string]int{"zero": 0, "one": 1}
 e1 := m["zero"] // value == 0
 size := len(m)  // ==2
 m["two"] = 2

Deleting an element:

 delete(m, "zero")

* Resources

.link https://golang-book.com
.link http://www.inf.unibz.it/dis/teaching/PP/ln/pp01_intro.pdf
.link http://www.inf.unibz.it/dis/teaching/PP/ln/pp02_oo.pdf
.link https://tour.golang.org
.link https://www.golangbootcamp.com/book

